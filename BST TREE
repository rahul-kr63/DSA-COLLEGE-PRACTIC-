#include <iostream>
using namespace std;

class node
{
public:
    int data;
    node *left;
    node *right;

    node(int value)
    {
        data = value;
        left = NULL;
        right = NULL;
    }
};
node *BSTInsert(node *root, int target) // INSERT CODE...
{
    if (!root)
    {
        node *temp = new node(target);
        return temp;
    }

    if (root->data > target)
        root->left = BSTInsert(root->left, target);

    else
        root->right = BSTInsert(root->right, target);

    return root;
}

bool search(node *root, int target) // SEARCH CODE...
{
    if (!root)
    {
        return 0;
    }
    if (root->data == target)
    {
        return 1;
    }

    if (root->data > target)
    {
        return search(root->left, target);
    }
    else
    {
        return search(root->right, target);
    }
}

node *deletBST(node *root, int target) // DELETE CODE...
{
    if (!root)
        return NULL;

    if (root->data > target)
    {
        root->left = deletBST(root->left, target);
    }
    else if (root->data < target)
    {
        root->right = deletBST(root->right, target);
    }
    else
    {

        if (root->left == NULL && root->right == NULL)
            delete root;
        return NULL;

        if (root->left == NULL)
        {
            node *temp = root->left;
            delete root;
            return temp;
        }

        else if (root->right == NULL)
        {
            node *temp = root->right;
            delete root;
            return temp;
        }
        else
        {
            node *child = root->right;
            node *parents = root;

            while (root->right)
            {
                parents = child;
                child = child->right;
            }

            if (root != parents)
            {
                parents->right = child->left;
                child->left = root->right;
                delete root;
                return child;
            }
            else
            {
                child->right = root->right;
                delete root;
                return child;
            }
        }
    }
}

void inorder(node *root) // l n r
{
    if (!root)
        return;
    inorder(root->left);
    cout << root->data;
    inorder(root->right);
};
int main()
{
    int arr[] = {2, 3, 4, 5, 6, 77, 88, 3, 89, 99};
    node *root = NULL;
    for (int i = 0; i < 10; i++)

        // root = BSTInsert(root, arr[i]);

         // travershing in in order

        // inorder(root);
        // cout<< "  "<<endl;

        // cout << search(root, 99) << " ";

        root = deletBST(root , arr[i] );
    cout << deletBST(root, 77) << " ";

    inorder(root);
    cout<< "  "<<endl;
}
